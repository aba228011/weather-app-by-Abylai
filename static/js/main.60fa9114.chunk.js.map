{"version":3,"sources":["components/InformationAboutWeather.jsx","components/FindWeather.jsx","App.js","reportWebVitals.js","index.js"],"names":["InformationAboutWeather","props","className","forecast","name","Math","round","main","temp","Date","sys","sunrise","toLocaleTimeString","sunset","weather","description","src","icon","alt","FindWeather","useState","lat","setLat","long","setLong","city","setCity","demoCity","setDemoCity","setForecast","useEffect","a","apiUrl","process","axios","get","then","resp","status","data","console","log","Error","response","fetchForecast","onFormSubmit","e","preventDefault","Container","maxWidth","AppBar","color","autoComplete","onSubmit","TextField","id","label","type","variant","onChange","target","value","Button","onClick","fontSize","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","Card","CardContent","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60fa9114.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst InformationAboutWeather = (props) => {\r\n    return (\r\n        <div>\r\n            <section className={\"forecastWeather\"}>\r\n                <div>\r\n                            <div className={\"partOfDescr\"}>\r\n                                <div>Location:</div>\r\n                                <div>{props.forecast.name}</div>\r\n                            </div>\r\n                            <div className={\"partOfDescr\"}>\r\n                                <div>Temprature:</div>\r\n                                <div>{Math.round(props.forecast.main.temp)} â„ƒ </div>\r\n                            </div>\r\n                            <div className={\"partOfDescr\"}>\r\n                                <div>Sunrise:</div>\r\n                                <div>{new Date(props.forecast.sys.sunrise * 1000).toLocaleTimeString('en-GB')}</div>\r\n                            </div>\r\n                            <div className={\"partOfDescr\"}>\r\n                                <div>Sunset: </div>\r\n                                <div>{new Date(props.forecast.sys.sunset * 1000).toLocaleTimeString('en-GB')}</div>\r\n                            </div>\r\n                            <div className={\"partOfDescr\"}>\r\n                                <div>Description:</div>\r\n                                <div className={\"lastDescr\"}>\r\n                                    <div>{props.forecast.weather[0].description}</div>\r\n                                    <img src={`https://api.openweathermap.org/img/w/${props.forecast.weather[0].icon}.png`}\r\n                                         alt={\"icon\"}/>\r\n                                </div>\r\n                            </div>\r\n\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InformationAboutWeather;","import React, {useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport {AppBar, Button, Card, CardContent, Container, TextField} from \"@material-ui/core\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InformationAboutWeather from \"./InformationAboutWeather\";\r\n\r\nconst FindWeather = () => {\r\n    const [lat, setLat] = useState([]);\r\n    const [long, setLong] = useState([]);\r\n    const [city, setCity] = useState(null);\r\n    const [demoCity, setDemoCity] = useState([]);\r\n    const [forecast, setForecast] = useState([]);\r\n\r\n    useEffect(//dependOnLocation\r\n        () => {\r\n            const fetchForecast = async () => {\r\n                const apiUrl = `${process.env.REACT_APP_API_URL}?lat=${lat}&lon=${long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`;\r\n                await axios.get(apiUrl)\r\n                    .then(resp => {\r\n                        if (resp.status === 200) {\r\n                            return resp.data;\r\n                        } else {\r\n                            console.log(\"error\")\r\n                            throw new Error(\"Please Enable your Location in your browser!\");\r\n                        }\r\n                    })\r\n                    .then((response) => {\r\n                        setCity(null)\r\n                        setForecast(response)\r\n                    });\r\n            }\r\n            fetchForecast();\r\n        }, [lat, long]\r\n    );\r\n    useEffect(//dependOnCity\r\n        () => {\r\n            const fetchForecast = async () => {\r\n                const apiUrl = `${process.env.REACT_APP_API_URL}?q=${city},kz&units=metric&APPID=${process.env.REACT_APP_API_KEY}`;\r\n                await axios.get(apiUrl)\r\n                    .then(resp => {\r\n                        if (resp.status === 200) {\r\n                            return resp.data;\r\n                        } else {\r\n                            throw new Error(\"Please Enable your Location in your browser!\");\r\n                        }\r\n                    })\r\n                    .then((response) => {\r\n                        setLat([]);\r\n                        setLong([]);\r\n                        setForecast(response);\r\n                    });\r\n            }\r\n            fetchForecast();\r\n        }, [city]\r\n    );\r\n\r\n    const onFormSubmit = e => {\r\n        e.preventDefault();\r\n        setCity(demoCity);\r\n    }\r\n\r\n    const autoDefineForecast = e => {\r\n        e.preventDefault();\r\n        navigator.geolocation.getCurrentPosition((position) => {\r\n            setLat(position.coords.latitude);\r\n            setLong(position.coords.longitude);\r\n        });\r\n    }\r\n\r\n    const onCityChange = (e) => {\r\n        setDemoCity(e.target.value);\r\n    }\r\n    return (\r\n        <Container maxWidth={\"md\"}>\r\n            <AppBar color={\"primary\"}>\r\n                <div className=\"heading\">\r\n                    Weather forecast by Abylai\r\n                </div>\r\n            </AppBar>\r\n            <section className={\"main\"}>\r\n                <form autoComplete=\"off\" onSubmit={onFormSubmit}>\r\n                    <TextField id=\"filled-search\" label=\"Your city in KZ (EN)\" type=\"search\" variant=\"filled\"\r\n                               onChange={onCityChange}/>\r\n                    <Button onClick={onFormSubmit} variant=\"contained\" color=\"action\">\r\n                        <SearchIcon color={\"primary\"} fontSize={\"medium\"} />\r\n                    </Button>\r\n                </form>\r\n                <div className={\"refreshLocation\"}>\r\n                    <div>Auto define location</div>\r\n                    <Button onClick={autoDefineForecast} variant=\"contained\" color=\"action\">\r\n                        <RefreshIcon color={\"primary\"} fontSize={\"small\"}/>\r\n                    </Button>\r\n                </div>\r\n            </section>\r\n\r\n            <Card>\r\n                <CardContent>\r\n            {(typeof forecast.main !== 'undefined') ? (<InformationAboutWeather forecast = {forecast} />)\r\n                : (\r\n                    <div className={\"forecastWeather\"}>Loading...</div>\r\n                )}\r\n                </CardContent>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default FindWeather;","import React from \"react\";\nimport FindWeather from \"./components/FindWeather\";\n\nconst App = () => {\n    return ( <FindWeather/> );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Container} from \"@material-ui/core\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Container maxWidth=\"sm\">\n          <App />\n      </Container>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}